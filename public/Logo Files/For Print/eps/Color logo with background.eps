%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2412 1713
%%HiResBoundingBox: 0 0 2412 1712.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2412 1712.88 re
W
q
[0.24 0 0 -0.24 0 1712.88] cm
q
0 0 10050 7137.5 re
W*
q
[3.124512 0 0 3.125089 0.0246546 0] cm
/DeviceRGB {} CS
[0.1843 0.2353 0.3059] SC
/DeviceRGB {} cs
[0.1843 0.2353 0.3059] sc
0 0 3216.4868 2283.9348 re
f
Q
q
[4.94938 0 0 4.950295 2548.9553 152.634094] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
696.70001 239.60001 m
508.5 37.5 l
508.5 441.70001 l
696.70001 239.60001 l
h
f
1.1669 w
0 J
0 j
10 M
1.1669 w
0 J
0 j
10 M
696.70001 239.60001 m
508.5 37.5 l
508.5 441.70001 l
696.70001 239.60001 l
h
S
822.20001 454.79999 m
832.09998 178.8 l
546.20001 464.60001 l
822.20001 454.79999 l
h
f
1.1669 w
0 J
0 j
10 M
1.1669 w
0 J
0 j
10 M
822.20001 454.79999 m
832.09998 178.8 l
546.20001 464.60001 l
822.20001 454.79999 l
h
S
758.90002 695.70001 m
961 507.5 l
556.79999 507.5 l
758.90002 695.70001 l
h
f
1.1669 w
0 J
0 j
10 M
1.1669 w
0 J
0 j
10 M
758.90002 695.70001 m
961 507.5 l
556.79999 507.5 l
758.90002 695.70001 l
h
S
543.70001 821.20001 m
819.70001 831.09998 l
533.90002 545.20001 l
543.70001 821.20001 l
h
f
1.1669 w
0 J
0 j
10 M
1.1669 w
0 J
0 j
10 M
543.70001 821.20001 m
819.70001 831.09998 l
533.90002 545.20001 l
543.70001 821.20001 l
h
S
302.79999 757.90002 m
491 960 l
491 555.79999 l
302.79999 757.90002 l
h
f
1.1669 w
0 J
0 j
10 M
1.1669 w
0 J
0 j
10 M
302.79999 757.90002 m
491 960 l
491 555.79999 l
302.79999 757.90002 l
h
S
177.3 542.70001 m
167.399994 818.70001 l
453.29999 532.90002 l
177.3 542.70001 l
h
f
1.1669 w
0 J
0 j
10 M
1.1669 w
0 J
0 j
10 M
177.3 542.70001 m
167.399994 818.70001 l
453.29999 532.90002 l
177.3 542.70001 l
h
S
240.60001 301.79999 m
38.5 490 l
442.70001 490 l
240.60001 301.79999 l
h
f
1.1669 w
0 J
0 j
10 M
1.1669 w
0 J
0 j
10 M
240.60001 301.79999 m
38.5 490 l
442.70001 490 l
240.60001 301.79999 l
h
S
455.79999 176.3 m
179.8 166.399994 l
465.60001 452.29999 l
455.79999 176.3 l
h
f
1.1669 w
0 J
0 j
10 M
1.1669 w
0 J
0 j
10 M
455.79999 176.3 m
179.8 166.399994 l
465.60001 452.29999 l
455.79999 176.3 l
h
S
534.10004 497 m
534.10004 498.02841 534.04962 499.05435 533.94885 500.07779 c
533.84808 501.1012 533.69733 502.11722 533.49664 503.12582 c
533.29602 504.13446 533.04645 505.13083 532.74792 506.11493 c
532.4494 507.09903 532.10333 508.06613 531.70978 509.0162 c
531.31622 509.96634 530.87708 510.8949 530.39233 511.80185 c
529.90753 512.7088 529.37946 513.58984 528.80811 514.44489 c
528.23676 515.29999 527.62488 516.125 526.97253 516.91992 c
526.32013 517.7149 525.63031 518.47595 524.90314 519.20313 c
524.17596 519.9303 523.41492 520.62012 522.62 521.27252 c
521.82501 521.92493 521 522.53674 520.1449 523.10809 c
519.28986 523.67944 518.40881 524.20752 517.50183 524.69232 c
516.59491 525.17712 515.66632 525.61627 514.71619 526.00977 c
513.76605 526.40338 512.79895 526.74945 511.81491 527.04797 c
510.83078 527.3465 509.83441 527.59607 508.82578 527.79669 c
507.8172 527.99731 506.80118 528.14807 505.77777 528.2489 c
504.7543 528.34967 503.72839 528.40002 502.70001 528.40002 c
501.67163 528.40002 500.64572 528.34961 499.62228 528.24884 c
498.59885 528.14807 497.58279 527.99731 496.57413 527.79669 c
495.56552 527.59607 494.56918 527.3465 493.58508 527.04797 c
492.60098 526.74945 491.63385 526.40338 490.68372 526.00977 c
489.73361 525.61627 488.80508 525.17712 487.89816 524.69232 c
486.99121 524.20752 486.11017 523.67944 485.25507 523.10809 c
484.39999 522.53674 483.57501 521.92493 482.78006 521.27252 c
481.98511 520.62012 481.22403 519.9303 480.49683 519.20313 c
479.76968 518.47595 479.0799 517.7149 478.42749 516.91992 c
477.77509 516.125 477.16321 515.29999 476.59183 514.44489 c
476.02051 513.58984 475.49246 512.7088 475.00769 511.80188 c
474.52292 510.8949 474.08374 509.96634 473.69016 509.0162 c
473.29663 508.06613 472.95059 507.09903 472.65207 506.11493 c
472.35358 505.13083 472.10397 504.13446 471.90332 503.12582 c
471.70273 502.11722 471.55203 501.1012 471.45123 500.07776 c
471.35043 499.05435 471.30002 498.02841 471.30002 497 c
471.30002 495.97162 471.35043 494.94571 471.45123 493.92227 c
471.55203 492.89883 471.70273 491.88278 471.90332 490.87411 c
472.10397 489.86551 472.35358 488.86914 472.6521 487.88504 c
472.95059 486.90091 473.29663 485.93378 473.69016 484.98367 c
474.08374 484.0336 474.52289 483.10507 475.00766 482.19809 c
475.49243 481.29114 476.02048 480.4101 476.5918 479.55499 c
477.16318 478.69995 477.77505 477.87494 478.42746 477.07996 c
479.07983 476.285 479.76962 475.52396 480.4968 474.79678 c
481.224 474.06961 481.98511 473.37982 482.78006 472.72742 c
483.57501 472.07501 484.39999 471.46313 485.25507 470.89178 c
486.11017 470.32047 486.99118 469.79239 487.89813 469.30759 c
488.80508 468.82281 489.73358 468.38367 490.68369 467.99011 c
491.63382 467.59659 492.60095 467.25058 493.58508 466.95209 c
494.56918 466.65356 495.56552 466.40396 496.57416 466.20331 c
497.58279 466.00272 498.59885 465.85202 499.62225 465.75122 c
500.64572 465.65042 501.67163 465.60004 502.70001 465.60001 c
503.72839 465.60004 504.7543 465.65045 505.77774 465.75125 c
506.80118 465.85205 507.8172 466.00275 508.82581 466.20334 c
509.83444 466.40399 510.83081 466.65356 511.81491 466.95206 c
512.79895 467.25058 513.76605 467.59659 514.71619 467.99011 c
515.66632 468.3837 516.59491 468.82285 517.50183 469.30762 c
518.40881 469.79242 519.28979 470.3205 520.14484 470.89182 c
520.99994 471.4632 521.82495 472.07507 522.61993 472.72748 c
523.41492 473.37985 524.17596 474.06964 524.90314 474.79681 c
525.63031 475.52402 526.32013 476.28506 526.97253 477.07999 c
527.62488 477.87497 528.23676 478.69998 528.80811 479.55499 c
529.37946 480.4101 529.90753 481.29114 530.39233 482.19809 c
530.87708 483.10507 531.31622 484.0336 531.70978 484.9837 c
532.10333 485.93381 532.4494 486.90094 532.74792 487.88504 c
533.04645 488.86914 533.29602 489.86551 533.49664 490.87415 c
533.69733 491.88278 533.84808 492.89883 533.94885 493.92227 c
534.04962 494.94571 534.10004 495.97162 534.10004 497 c
h
f
1.1669 w
0 J
0 j
10 M
1.1669 w
0 J
0 j
10 M
534.10004 497 m
534.10004 498.02841 534.04962 499.05435 533.94885 500.07779 c
533.84808 501.1012 533.69733 502.11722 533.49664 503.12582 c
533.29602 504.13446 533.04645 505.13083 532.74792 506.11493 c
532.4494 507.09903 532.10333 508.06613 531.70978 509.0162 c
531.31622 509.96634 530.87708 510.8949 530.39233 511.80185 c
529.90753 512.7088 529.37946 513.58984 528.80811 514.44489 c
528.23676 515.29999 527.62488 516.125 526.97253 516.91992 c
526.32013 517.7149 525.63031 518.47595 524.90314 519.20313 c
524.17596 519.9303 523.41492 520.62012 522.62 521.27252 c
521.82501 521.92493 521 522.53674 520.1449 523.10809 c
519.28986 523.67944 518.40881 524.20752 517.50183 524.69232 c
516.59491 525.17712 515.66632 525.61627 514.71619 526.00977 c
513.76605 526.40338 512.79895 526.74945 511.81491 527.04797 c
510.83078 527.3465 509.83441 527.59607 508.82578 527.79669 c
507.8172 527.99731 506.80118 528.14807 505.77777 528.2489 c
504.7543 528.34967 503.72839 528.40002 502.70001 528.40002 c
501.67163 528.40002 500.64572 528.34961 499.62228 528.24884 c
498.59885 528.14807 497.58279 527.99731 496.57413 527.79669 c
495.56552 527.59607 494.56918 527.3465 493.58508 527.04797 c
492.60098 526.74945 491.63385 526.40338 490.68372 526.00977 c
489.73361 525.61627 488.80508 525.17712 487.89816 524.69232 c
486.99121 524.20752 486.11017 523.67944 485.25507 523.10809 c
484.39999 522.53674 483.57501 521.92493 482.78006 521.27252 c
481.98511 520.62012 481.22403 519.9303 480.49683 519.20313 c
479.76968 518.47595 479.0799 517.7149 478.42749 516.91992 c
477.77509 516.125 477.16321 515.29999 476.59183 514.44489 c
476.02051 513.58984 475.49246 512.7088 475.00769 511.80188 c
474.52292 510.8949 474.08374 509.96634 473.69016 509.0162 c
473.29663 508.06613 472.95059 507.09903 472.65207 506.11493 c
472.35358 505.13083 472.10397 504.13446 471.90332 503.12582 c
471.70273 502.11722 471.55203 501.1012 471.45123 500.07776 c
471.35043 499.05435 471.30002 498.02841 471.30002 497 c
471.30002 495.97162 471.35043 494.94571 471.45123 493.92227 c
471.55203 492.89883 471.70273 491.88278 471.90332 490.87411 c
472.10397 489.86551 472.35358 488.86914 472.6521 487.88504 c
472.95059 486.90091 473.29663 485.93378 473.69016 484.98367 c
474.08374 484.0336 474.52289 483.10507 475.00766 482.19809 c
475.49243 481.29114 476.02048 480.4101 476.5918 479.55499 c
477.16318 478.69995 477.77505 477.87494 478.42746 477.07996 c
479.07983 476.285 479.76962 475.52396 480.4968 474.79678 c
481.224 474.06961 481.98511 473.37982 482.78006 472.72742 c
483.57501 472.07501 484.39999 471.46313 485.25507 470.89178 c
486.11017 470.32047 486.99118 469.79239 487.89813 469.30759 c
488.80508 468.82281 489.73358 468.38367 490.68369 467.99011 c
491.63382 467.59659 492.60095 467.25058 493.58508 466.95209 c
494.56918 466.65356 495.56552 466.40396 496.57416 466.20331 c
497.58279 466.00272 498.59885 465.85202 499.62225 465.75122 c
500.64572 465.65042 501.67163 465.60004 502.70001 465.60001 c
503.72839 465.60004 504.7543 465.65045 505.77774 465.75125 c
506.80118 465.85205 507.8172 466.00275 508.82581 466.20334 c
509.83444 466.40399 510.83081 466.65356 511.81491 466.95206 c
512.79895 467.25058 513.76605 467.59659 514.71619 467.99011 c
515.66632 468.3837 516.59491 468.82285 517.50183 469.30762 c
518.40881 469.79242 519.28979 470.3205 520.14484 470.89182 c
520.99994 471.4632 521.82495 472.07507 522.61993 472.72748 c
523.41492 473.37985 524.17596 474.06964 524.90314 474.79681 c
525.63031 475.52402 526.32013 476.28506 526.97253 477.07999 c
527.62488 477.87497 528.23676 478.69998 528.80811 479.55499 c
529.37946 480.4101 529.90753 481.29114 530.39233 482.19809 c
530.87708 483.10507 531.31622 484.0336 531.70978 484.9837 c
532.10333 485.93381 532.4494 486.90094 532.74792 487.88504 c
533.04645 488.86914 533.29602 489.86551 533.49664 490.87415 c
533.69733 491.88278 533.84808 492.89883 533.94885 493.92227 c
534.04962 494.94571 534.10004 495.97162 534.10004 497 c
h
S
Q
q
[76.960564 0 0 76.974785 220.23637 5143.2197] cm
q
7.0508 20.195311 m
3.9551 20.195311 1.5332 18.61331 1.5332 15.058611 c
1.5332 5.888711 l
4.4629 5.888711 l
4.4629 14.658211 l
4.4629 16.80661 5.6055 17.60741 7.050799 17.60741 c
8.505899 17.60741 9.658199 16.79686 9.658199 14.658211 c
9.658199 5.888711 l
12.587899 5.888711 l
12.587899 15.058611 l
12.587899 18.613312 10.1563 20.195311 7.050799 20.195311 c
7.0508 20.195311 l
h
23.525394 12.5488 m
25.117195 12.988251 26.181694 14.0332 26.181694 16.044901 c
26.181694 18.4277 24.736395 20 21.757895 20 c
15.947394 20 l
15.947394 5.889 l
20.517694 5.889 l
23.564594 5.889 25.166096 7.3538 25.166096 9.7562 c
25.166096 10.9964 24.628986 12.0121 23.525496 12.5492 c
23.525394 12.5488 l
h
20.546894 8.32 m
18.769594 8.32 l
18.769594 11.6403 l
20.673895 11.6403 l
21.923895 11.6403 22.470795 10.898109 22.470795 9.9411 c
22.470795 9.0036 21.855564 8.32 20.546995 8.32 c
20.546894 8.32 l
h
21.210894 17.4902 m
22.792894 17.4902 23.339794 16.640591 23.339794 15.7226 c
23.339794 14.7851 22.802685 13.896401 21.152294 13.896401 c
18.769493 13.896401 l
18.769493 17.4902 l
21.210894 17.4902 l
h
28.789091 20 m
28.789091 5.889 l
31.718792 5.889 l
31.718792 20 l
28.789093 20 l
28.789091 20 l
h
49.326157 20.585939 m
46.884758 21.51367 l
45.078159 19.48237 l
44.082069 19.941351 42.92976 20.195261 41.67976 20.195261 c
37.48056 20.195261 34.375061 17.36326 34.375061 12.939362 c
34.375061 8.505762 37.48056 5.693262 41.67976 5.693262 c
45.87896 5.693262 48.984459 8.505762 48.984459 12.939362 c
48.984459 15.038961 48.2911 16.777262 47.109459 18.027262 c
49.326157 20.585939 l
h
37.294956 12.9395 m
37.294956 15.9473 39.199257 17.6465 41.679756 17.6465 c
44.160255 17.6465 46.064556 15.9473 46.064556 12.9395 c
46.064556 10.0879 44.160255 8.388701 41.679756 8.388701 c
39.199257 8.388701 37.294956 10.0879 37.294956 12.939501 c
37.294956 12.9395 l
h
57.0508 20.195311 m
53.955101 20.195311 51.533199 18.61331 51.533199 15.058611 c
51.533199 5.888711 l
54.462898 5.888711 l
54.462898 14.658211 l
54.462898 16.80661 55.605499 17.60741 57.050797 17.60741 c
58.505898 17.60741 59.658195 16.79686 59.658195 14.658211 c
59.658195 5.888711 l
62.587894 5.888711 l
62.587894 15.058611 l
62.587894 18.613312 60.156296 20.195311 57.050797 20.195311 c
57.0508 20.195311 l
h
W
[61.054697 0 0 15.820408 1.5332 5.693261] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.008 mul 0.984 add
1 index 1 exp 0.239 mul 0.69 add
2 index 1 exp -0.055 mul 0.251 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[77.925018 0 0 77.93943 5188.4629 5123.2583] cm
q
1.9922 20 m
1.9922 6.074 l
4.3262 6.074 l
4.3262 20 l
1.9922 20 l
h
15.996059 6.074 m
15.996059 8.1541 l
12.558559 8.1541 l
12.558559 20.000099 l
10.23436 20.000099 l
10.23436 8.1541 l
6.78706 8.1541 l
6.78706 6.073999 l
15.996059 6.073999 l
15.996059 6.074 l
h
24.521444 20.185551 m
20.517544 20.185551 17.490145 17.44145 17.490145 13.027351 c
17.490145 8.623051 20.517445 5.878951 24.521444 5.878951 c
28.515545 5.878951 31.542944 8.623052 31.542944 13.027351 c
31.542944 17.441452 28.515644 20.185551 24.521444 20.185551 c
h
24.521444 18.017599 m
27.158144 18.017599 29.218744 16.191399 29.218744 13.027399 c
29.218744 9.892599 27.158245 8.056699 24.521444 8.056699 c
21.884644 8.056699 19.824144 9.892599 19.824144 13.027399 c
19.824144 16.1915 21.884644 18.017599 24.521444 18.017599 c
h
39.541023 20.185551 m
36.582024 20.185551 34.277325 18.535151 34.277325 15.25395 c
34.277325 6.07425 l
36.621124 6.07425 l
36.621124 14.93165 l
36.621124 17.148451 37.900425 18.095751 39.541023 18.095751 c
41.181622 18.095751 42.480522 17.138721 42.480522 14.931651 c
42.480522 6.074251 l
44.814522 6.074251 l
44.814522 15.253951 l
44.814522 18.535252 42.509823 20.185551 39.541122 20.185551 c
39.541023 20.185551 l
h
52.978474 20.185551 m
50.029274 20.185551 47.822174 18.779251 47.372974 16.318352 c
49.775276 15.761712 l
50.029186 17.363312 51.347576 18.242212 53.066277 18.242212 c
54.423676 18.242212 55.654175 17.666042 55.634678 16.201212 c
55.615147 14.677812 53.925678 14.238312 52.09948 13.720712 c
49.990078 13.105482 47.822182 12.402311 47.822182 9.843712 c
47.822182 7.246012 49.95108 5.878912 52.59758 5.878912 c
55.038979 5.878912 57.353481 6.904312 57.890579 9.404312 c
55.634678 9.970722 l
55.322178 8.486322 54.169876 7.832022 52.714779 7.832022 c
51.415977 7.832022 50.185478 8.388662 50.185478 9.804722 c
50.185478 11.093821 51.66008 11.494222 53.349579 11.962922 c
55.527279 12.568392 58.046879 13.310622 58.046879 16.103523 c
58.046879 18.984423 55.634777 20.185524 52.978477 20.185524 c
52.978474 20.185551 l
h
W
[56.054681 0 0 14.306639 1.992205 5.87891] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.008 mul 0.984 add
1 index 1 exp 0.239 mul 0.69 add
2 index 1 exp -0.055 mul 0.251 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
